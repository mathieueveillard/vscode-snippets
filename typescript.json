{
  "iife": {
    "prefix": "iife",
    "body": ["(() => {", "", "})()"],
    "description": "Immediatly Invoked Function Expression"
  },
  "Function of arity 1": {
    "prefix": "function-arity-1",
    "body": ["const ${1:functionName} = (): ${2:ReturnType} => "],
    "description": "Function of arity 1"
  },
  "Function of arity 2": {
    "prefix": "function-arity-2",
    "body": ["const ${1:functionName} = () => (): ${2:ReturnType} => "],
    "description": "Function of arity 2"
  },
  "Function of arity 3": {
    "prefix": "function-arity-3",
    "body": ["const ${1:functionName} = () => () => (): ${2:ReturnType} => "],
    "description": "Function of arity 3"
  },
  "Jest describe": {
    "prefix": "jest-describe",
    "body": ["describe(\"\", () => {", "  ", "});"],
    "description": "Jest describe"
  },
  "Jest test": {
    "prefix": "jest-test",
    "body": [
      "test(\"\", () => {",
      "  // GIVEN",
      "  ",
      "  // WHEN",
      "  const actual = ${1:functionUnderTest}();",
      "  ",
      "  // THEN",
      "  const expected: ${2:number} = 0;",
      "  expect(actual).toEqual(expected);",
      "});"
    ],
    "description": "Jest test"
  },
  "Jest property-based testing": {
    "prefix": "jest-test-pbt",
    "body": [
      "test(\"\", () => {",
      "  fc.assert(",
      "    fc.property(fc.record({ a: fc.nat(), b: fc.nat() }), ({ a, b }) => {",
      "      fc.pre(a < b);",
      "      return true;",
      "    })",
      "  );",
      "});"
    ],
    "description": "Jest test"
  },
  "Jest full": {
    "prefix": "jest-describe-and-test",
    "body": [
      "describe(\"\", () => {",
      "  test(\"\", () => {",
      "    // GIVEN",
      "    ",
      "    // WHEN",
      "    const actual = ${1:functionUnderTest}();",
      "    ",
      "    // THEN",
      "    const expected: ${2:number} = 0;",
      "    expect(actual).toEqual(expected);",
      "  });",
      "});"
    ],
    "description": "Jest describe and test"
  },
  "Triangulation": {
    "prefix": "jest-test-tdd-triangulation",
    "body": ["test(\"[Triangulation] \", () => {});"]
  },
  "Control": {
    "prefix": "jest-test-tdd-control",
    "body": ["test(\"[Control] \", () => {});"]
  }
}
