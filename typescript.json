{
  "iife": {
    "prefix": "iife",
    "body": ["(() => {", "", "})()"],
    "description": "Immediatly Invoked Function Expression"
  },
  "Function of arity 1": {
    "prefix": "function-arity-1",
    "body": ["const ${1:functionName} = (): ${2:ReturnType} => "],
    "description": "Function of arity 1"
  },
  "Function of arity 2": {
    "prefix": "function-arity-2",
    "body": ["const ${1:functionName} = () => (): ${2:ReturnType} => "],
    "description": "Function of arity 2"
  },
  "Function of arity 3": {
    "prefix": "function-arity-3",
    "body": ["const ${1:functionName} = () => () => (): ${2:ReturnType} => "],
    "description": "Function of arity 3"
  },
  "Jest describe": {
    "prefix": "jest-describe",
    "body": ["describe(\"\", () => {", "  ", "});"],
    "description": "Jest describe"
  },
  "Jest test": {
    "prefix": "jest-test",
    "body": [
      "test(\"\", () => {",
      "  // GIVEN",
      "  ",
      "  // WHEN",
      "  const actual = ${1:functionUnderTest}();",
      "  ",
      "  // THEN",
      "  const expected: ${2:number} = 0;",
      "  expect(actual).toEqual(expected);",
      "});"
    ],
    "description": "Jest test"
  },
  "Jest full": {
    "prefix": "jest-describe-and-test",
    "body": [
      "describe(\"\", () => {",
      "  test(\"\", () => {",
      "    // GIVEN",
      "    ",
      "    // WHEN",
      "    const actual = ${1:functionUnderTest}();",
      "    ",
      "    // THEN",
      "    const expected: ${2:number} = 0;",
      "    expect(actual).toEqual(expected);",
      "  });",
      "});"
    ],
    "description": "Jest describe and test"
  },
  "Redux thunk": {
    "prefix": "redux-thunk",
    "body": [
      "import { Thunk, ExtendedDispatch as Dispatch, ExtraArgument } from \"business/definitions\";",
      "import { ApplicationState } from \"business/state\";",
      "",
      "export function create${1:ThunkName}Thunk(): Thunk<void> {",
      "  return async (",
      "    dispatch: Dispatch,",
      "    getState: () => ApplicationState,",
      "    {  }: ExtraArgument",
      "  ) => {",
      "    const state: ApplicationState = getState();",
      "  };",
      "}"
    ],
    "description": "Redux thunk creator"
  },
  "Redux thunk test": {
    "prefix": "redux-thunk-test",
    "body": [
      "import { mockStore } from \"util/mockStore\";",
      "import { mockObject } from \"util/mockObject\";",
      "import { RecursivePartial } from \"util/recursivePartial\";",
      "import { Thunk, ExtraArgument } from \"business/definitions\";",
      "import { ApplicationState } from \"business/state\";",
      "import { create${1:ThunkName}Thunk } from \"./thunks\";",

      "describe(\"Test of create${1:ThunkName}Thunk()\", () => {",
      "test(\"\", async () => {",
      "    // GIVEN",
      "    const extraArgument: RecursivePartial<ExtraArgument> = {};",
      "    const initialState = mockObject<ApplicationState>();",
      "    const store = mockStore(extraArgument, initialState);",
      "",
      "    // WHEN",
      "    const thunk: Thunk<void> = create${1:ThunkName}Thunk();",
      "    await store.dispatch(thunk);",
      "",
      "    // THEN",
      "    const actualActions = store.getActions();",
      "    const expectedActions = [];",
      "    expect(actualActions).toEqual(expectedActions);",
      "  });",
      "});"
    ],
    "description": "Test of a thunk creator"
  }
}
